import os
import io
import asyncio
import logging
import tempfile
from typing import Dict, Any
import shutil


import asyncssh
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, BufferedInputFile
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import rsa, ed25519
from dotenv import load_dotenv

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –±–æ—Ç–∞
BOT_DIR = os.path.dirname(os.path.abspath(__file__))
LOG_DIR = os.path.join(BOT_DIR, 'logs')

load_dotenv()

try:
    shutil.rmtree('logs')
    os.makedirs('logs')
except FileNotFoundError:
    os.makedirs('logs')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(os.path.join(LOG_DIR, 'bot.log')),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

bot = Bot(token=os.getenv("BOT_TOKEN"))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class SshSteps(StatesGroup):
    main_menu = State()
    choose_key_type = State()
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞
    get_server_info = State()
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª—é—á–∞
    get_existing_public_key = State()
    get_existing_private_key = State()
    get_server_info_for_existing = State()
    wait_for_2fa = State()


# –•–µ—Ä–Ω—è —Ç–∏–ø–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á")],
        [KeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á")]
    ],
    resize_keyboard=True
)

key_type_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="RSA (4096)"), KeyboardButton(text="Ed25519")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

export_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üöÄ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä")],
        [KeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ],
    resize_keyboard=True
)

# –ù–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª—é—á–∞
cancel_export_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]
    ],
    resize_keyboard=True
)


@dp.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.clear()
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å SSH-–∫–ª—é—á–∏.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_keyboard
    )
    await state.set_state(SshSteps.main_menu)


@dp.message(StateFilter(SshSteps.main_menu), lambda message: message.text == "üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á")
async def start_key_generation(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞"""
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–ª—é—á–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", reply_markup=key_type_keyboard)
    await state.set_state(SshSteps.choose_key_type)


@dp.message(StateFilter(SshSteps.main_menu), lambda message: message.text == "üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á")
async def start_existing_key_export(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª—é—á–∞"""
    await message.answer(
        "–•–æ—Ä–æ—à–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∞—à **–ø—É–±–ª–∏—á–Ω—ã–π** SSH-–∫–ª—é—á (—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ .pub).",
        reply_markup=cancel_export_keyboard, # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ç–º–µ–Ω–æ–π
        parse_mode="Markdown"
    )
    await state.set_state(SshSteps.get_existing_public_key)


@dp.message(StateFilter(SshSteps.get_existing_public_key))
async def process_existing_public_key(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await cmd_start(message, state)
        return

    if not message.text or not message.text.startswith(("ssh-rsa", "ssh-ed25519")):
        await message.answer("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø—É–±–ª–∏—á–Ω—ã–π SSH-–∫–ª—é—á. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'.", reply_markup=cancel_export_keyboard)
        return

    await state.update_data(public_key=message.text)
    await message.answer(
        "‚úÖ –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∞—à **–ø—Ä–∏–≤–∞—Ç–Ω—ã–π** –∫–ª—é—á.",
        reply_markup=cancel_export_keyboard, # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è
        parse_mode="Markdown"
    )
    await state.set_state(SshSteps.get_existing_private_key)


@dp.message(StateFilter(SshSteps.get_existing_private_key))
async def process_existing_private_key(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞"""
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await cmd_start(message, state)
        return

    if not message.text or "PRIVATE KEY" not in message.text:
        await message.answer("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π SSH-–∫–ª—é—á. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'.", reply_markup=cancel_export_keyboard)
        return

    await state.update_data(private_key=message.text)
    await message.answer(
        "‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "`–∏–º—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è@ip_–∞–¥—Ä–µ—Å`"
        "\n\n*–ù–∞–ø—Ä–∏–º–µ—Ä:* `root@192.168.1.1`",
        reply_markup=cancel_export_keyboard, # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è
        parse_mode="Markdown"
    )
    await state.set_state(SshSteps.get_server_info_for_existing)


@dp.message(StateFilter(SshSteps.choose_key_type), lambda message: message.text in ["RSA (4096)", "Ed25519"])
async def generate_key(message: Message, state: FSMContext):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è SSH –∫–ª—é—á–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    key_type = message.text
    await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–ª—é—á–∏... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.", reply_markup=ReplyKeyboardRemove())

    if "RSA" in key_type:
        private_key = rsa.generate_private_key(public_exponent=65537, key_size=4096)
    else:  # Ed25519
        private_key = ed25519.Ed25519PrivateKey.generate()

    # –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ OpenSSH
    openssh_private_key_bytes = private_key.private_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PrivateFormat.OpenSSH,
        encryption_algorithm=serialization.NoEncryption()
    )
    openssh_private_key_str = openssh_private_key_bytes.decode('utf-8')

    # –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PEM
    pem_private_key_bytes = private_key.private_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PrivateFormat.PKCS8,
        encryption_algorithm=serialization.NoEncryption()
    )
    pem_private_key_str = pem_private_key_bytes.decode('utf-8')

    # –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞
    public_key = private_key.public_key()
    ssh_public_key_bytes = public_key.public_bytes(
        encoding=serialization.Encoding.OpenSSH,
        format=serialization.PublicFormat.OpenSSH
    )
    public_key_str = ssh_public_key_bytes.decode('utf-8')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á–∏ –≤ FSM
    await state.update_data(private_key=openssh_private_key_str, public_key=public_key_str)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer("‚úÖ –í–∞—à–∏ –∫–ª—é—á–∏ –≥–æ—Ç–æ–≤—ã!\n\n**–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á (OpenSSH)** (—Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞–¥–µ–∂–Ω–æ–º –º–µ—Å—Ç–µ –∏ –Ω–∏–∫–æ–º—É –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–π—Ç–µ):")
    await message.answer_document(
        BufferedInputFile(openssh_private_key_str.encode('utf-8'), filename="id_generated_key_openssh"),
        caption="–í–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ OpenSSH."
    )

    await message.answer("**–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á (PEM)**:")
    await message.answer_document(
        BufferedInputFile(pem_private_key_str.encode('utf-8'), filename="id_generated_key_pem"),
        caption="–í–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ PEM."
    )

    await message.answer("**–ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á** (–µ–≥–æ –º–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å):")
    await message.answer(f"```\n{public_key_str}\n```", parse_mode="Markdown")

    await message.answer("–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?", reply_markup=export_keyboard)
    await state.set_state(SshSteps.get_server_info)


@dp.message(StateFilter(SshSteps.get_server_info), lambda message: message.text == "üöÄ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
async def request_server_info(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"""
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "`–∏–º—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è@ip_–∞–¥—Ä–µ—Å`"
        "\n\n*–ù–∞–ø—Ä–∏–º–µ—Ä:* `root@192.168.1.1`",
        reply_markup=cancel_export_keyboard, # –î–æ–±–∞–≤–ª—è–µ–º –û—Ç–º–µ–Ω—É
        parse_mode="Markdown"
    )

@dp.message(StateFilter(SshSteps.get_server_info), lambda message: message.text == "–û—Ç–º–µ–Ω–∞")
@dp.message(StateFilter(SshSteps.get_server_info_for_existing), lambda message: message.text == "–û—Ç–º–µ–Ω–∞")
async def handle_cancel_during_server_info(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –û—Ç–º–µ–Ω–∞ –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞"""
    await cmd_start(message, state)


@dp.message(StateFilter(SshSteps.get_server_info), lambda message: '@' in message.text)
async def process_server_info_and_export(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞ –∏ –∑–∞–ø—É—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    await state.update_data(server_info=message.text)
    user_data = await state.get_data()
    # –ó–∞–ø—É—Å–∫–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(export_key_to_server(message, user_data))


@dp.message(StateFilter(SshSteps.get_server_info_for_existing), lambda message: '@' in message.text)
async def process_server_info_and_export_existing(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª—é—á–∞"""
    await state.update_data(server_info=message.text)
    user_data = await state.get_data()
    # –ó–∞–ø—É—Å–∫–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(export_key_to_server(message, user_data, is_existing=True))


@dp.message(StateFilter(SshSteps.get_server_info), lambda message: message.text == "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu_after_generation(message: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await cmd_start(message, state)


@dp.message(StateFilter(SshSteps.choose_key_type), lambda message: message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main_menu_from_type_choice(message: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await cmd_start(message, state)


async def export_key_to_server(message: Message, user_data: Dict[str, Any], is_existing: bool = False):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É –∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–ª—é—á–∞"""
    chat_id = message.chat.id
    try:
        server_info = user_data.get('server_info')
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ server_info –Ω–µ –û—Ç–º–µ–Ω–∞
        if server_info == "–û—Ç–º–µ–Ω–∞":
            await bot.send_message(chat_id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu_keyboard)
            state = dp.fsm.resolve_context(bot, chat_id, chat_id)
            await state.set_state(SshSteps.main_menu)
            return

        username, host = server_info.split('@')
        public_key = user_data.get('public_key')
        
        await bot.send_message(chat_id, f"üîå –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ {host}...")
        
        # –ó–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è
        password_message = await bot.send_message(
            chat_id,
            f"–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `{username}` –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ `{host}`:\n\n*–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.*",
            reply_markup=cancel_export_keyboard, # –î–æ–±–∞–≤–ª—è–µ–º –û—Ç–º–µ–Ω—É
            parse_mode="Markdown"
        )
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è
        state = dp.fsm.resolve_context(bot, chat_id, chat_id)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–∞—Ä–æ–ª—è, —á—Ç–æ–±—ã –µ–≥–æ –ø–æ—Ç–æ–º —É–¥–∞–ª–∏—Ç—å
        await state.update_data(password_prompt_message_id=password_message.message_id)

        # –ó–¥–µ—Å—å –º—ã –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞—Ä–æ–ª–µ–º.
        # –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–º –Ω—É–∂–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫.
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —ç–∫—Å–ø–æ—Ä—Ç—É: {e}")
        await bot.send_message(chat_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=main_menu_keyboard)
        state = dp.fsm.resolve_context(bot, chat_id, chat_id)
        await state.set_state(SshSteps.main_menu)


class CustomSshClient(asyncssh.SSHClient):
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–ø–∞—Ä–æ–ª—å, 2FA).
    –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è, –æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –≤—Å–µ—Ö –ª–æ–≥–æ–≤ –¥–ª—è asyncssh v1.x.
    """
    def __init__(self, bot_instance, chat_id, state: FSMContext, password: str):
        self._bot = bot_instance
        self._chat_id = chat_id
        self._state = state
        self._password = password
        super().__init__()

    def password_auth_requested(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä–æ–ª—å –ø–æ –∑–∞–ø—Ä–æ—Å—É –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞."""
        return self._password

    def kbdint_auth_requested(self):
        """
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ë–ï–ó –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –û–î–ù–£ –°–¢–†–û–ö–£,
        —Å–æ–¥–µ—Ä–∂–∞—â—É—é –ø–æ–¥–º–µ—Ç–æ–¥—ã. –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ '' –æ–∑–Ω–∞—á–∞–µ—Ç "—è –≥–æ—Ç–æ–≤".
        """
        return ''  # <--- –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–û–ó–í–†–ê–©–ê–ï–ú –°–¢–†–û–ö–£, –ù–ï –ö–û–†–¢–ï–ñ

    async def kbdint_challenge_received(self, name, instructions, lang, prompts):
        """
        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∞–º–æ–≥–æ 2FA-–∑–∞–ø—Ä–æ—Å–∞,
        –ü–û–°–õ–ï —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç kbdint_auth_requested.
        """
        if not prompts:
            return []

        future = asyncio.get_event_loop().create_future()
        prompt_text = prompts[0][0]

        try:
            msg = await self._bot.send_message(
                self._chat_id,
                f"üîê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç:\n`{prompt_text}`\n\n–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º–æ–µ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'.",
                reply_markup=cancel_export_keyboard,
                parse_mode="Markdown"
            )
            await self._state.set_state(SshSteps.wait_for_2fa)
            await self._state.update_data(
                two_fa_future=future,
                prompt_msg_id=msg.message_id
            )
            responses = await future
            return responses
        except asyncio.CancelledError:
            logging.info("–û–ø–µ—Ä–∞—Ü–∏—è 2FA –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
            return []
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø—Ä–æ—Å–∞ 2FA: {e}")
            if not future.done():
                future.cancel()
            raise


@dp.message(StateFilter(SshSteps.wait_for_2fa))
async def process_2fa_code(message: Message, state: FSMContext):
    """–≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≤–∏—Ç —Ç–æ–ª—å–∫–æ –∫–æ–¥ 2FA –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if message.text == "–û—Ç–º–µ–Ω–∞":
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –æ—Ç–º–µ–Ω—É –≤–æ –≤—Ä–µ–º—è 2FA,
        # –Ω—É–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å future, —á—Ç–æ–±—ã asyncssh –Ω–µ –∑–∞–≤–∏—Å.
        user_data = await state.get_data()
        future = user_data.get("two_fa_future")
        if future and not future.done():
            future.cancel() # –û—Ç–º–µ–Ω—è–µ–º Future

        await message.delete() # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º
        prompt_msg_id = user_data.get('prompt_msg_id')
        if prompt_msg_id:
            try:
                await bot.delete_message(message.chat.id, prompt_msg_id)
            except: pass

        await cmd_start(message, state) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        return

    user_data = await state.get_data()
    future = user_data.get("two_fa_future")

    # –í—ã–ø–æ–ª–Ω—è–µ–º "Future", –æ—Ç–ø—Ä–∞–≤–ª—è—è –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ SSH –∫–ª–∏–µ–Ω—Ç
    if future and not future.done():
        # –í —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏—è—Ö –Ω—É–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤
        future.set_result([message.text])

    # –ß–∏—Å—Ç–∏–º –∑–∞ —Å–æ–±–æ–π
    await message.delete() # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º
    prompt_msg_id = user_data.get('prompt_msg_id')
    if prompt_msg_id:
        try:
            await bot.delete_message(message.chat.id, prompt_msg_id)
        except: pass

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ 2FA –æ–±—Ä–∞–±–æ—Ç–∞–Ω
    # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Å—è –≤ handle_ssh_connection
    await state.set_state(SshSteps.get_server_info)

async def handle_2fa_request_for_user(bot_instance: Bot, chat_id: int, state: FSMContext,
                                      _name, _instructions, _lang, prompts):
    """
    –û—Ç–¥–µ–ª—å–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ 2FA (kbd-interactive).
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π asyncssh.
    """
    if not prompts:
        return []

    # –°–æ–∑–¥–∞–µ–º "Future" - –æ–±–µ—â–∞–Ω–∏–µ, —á—Ç–æ –º—ã –ø–æ–ª—É—á–∏–º –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∑–∂–µ
    future = asyncio.get_event_loop().create_future()

    prompt_text = prompts[0][0]  # –ë–µ—Ä–µ–º —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Verification code:")

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–ø—Ä–æ—Å –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        msg = await bot_instance.send_message(
            chat_id,
            f"üîê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç:\n`{prompt_text}`\n\n–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:\n\n*–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.*",
            reply_markup=cancel_export_keyboard,
            parse_mode="Markdown"
        )

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º FSM –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è 2FA –∫–æ–¥–∞
        await state.set_state(SshSteps.wait_for_2fa)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º future –∏ id —Å–æ–æ–±—â–µ–Ω–∏—è –≤ FSM –¥–ª—è —Ö–µ–Ω–¥–ª–µ—Ä–∞ process_2fa_code
        await state.update_data(
            two_fa_future=future,
            prompt_msg_id=msg.message_id
        )

        # –ñ–¥–µ–º, –ø–æ–∫–∞ —Ö–µ–Ω–¥–ª–µ—Ä process_2fa_code –≤—ã–ø–æ–ª–Ω–∏—Ç future —Å –æ—Ç–≤–µ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        responses = await future
        return responses
    except Exception as e:
        # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞),
        # –æ—Ç–º–µ–Ω—è–µ–º future, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–Ω—É—Ç—å.
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø—Ä–æ—Å–∞ 2FA: {e}")
        if not future.done():
            future.cancel()
        raise  # –ü–µ—Ä–µ–¥–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–∞–ª—å—à–µ, —á—Ç–æ–±—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã–ª–æ—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ


@dp.message(StateFilter(SshSteps.get_server_info, SshSteps.get_server_info_for_existing))
@dp.message(StateFilter(SshSteps.get_server_info, SshSteps.get_server_info_for_existing))
@dp.message(StateFilter(SshSteps.get_server_info, SshSteps.get_server_info_for_existing))
async def handle_ssh_connection(message: Message, state: FSMContext):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ª–æ–≤–∏—Ç –ø–∞—Ä–æ–ª—å –∏ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.
    """
    password = message.text
    chat_id = message.chat.id

    if password == "–û—Ç–º–µ–Ω–∞":
        try:
            user_data = await state.get_data()
            prompt_id = user_data.get('password_prompt_message_id')
            if prompt_id:
                await bot.delete_message(chat_id, prompt_id)
            await message.delete()
        except Exception:
            pass
        await cmd_start(message, state)
        return

    try:
        await message.delete()
        user_data = await state.get_data()
        prompt_id = user_data.get('password_prompt_message_id')
        if prompt_id:
            await bot.delete_message(chat_id, prompt_id)
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–∏—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    user_data = await state.get_data()
    server_info = user_data.get('server_info')
    username, host = server_info.split('@')
    public_key = user_data.get('public_key')

    try:
        # –§–∞–±—Ä–∏–∫–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞—à –∫–∞—Å—Ç–æ–º–Ω—ã–π SSH –∫–ª–∏–µ–Ω—Ç, –ø–µ—Ä–µ–¥–∞–≤–∞—è –µ–º—É –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ
        client_factory = lambda: CustomSshClient(bot, chat_id, state, password)

        # –í—ã–∑—ã–≤–∞–µ–º connect –ë–ï–ó 'kbdint_handler', —Ç–∞–∫ –∫–∞–∫ –ª–æ–≥–∏–∫–∞ —Ç–µ–ø–µ—Ä—å –≤–Ω—É—Ç—Ä–∏ CustomSshClient
        async with asyncssh.connect(host, username=username,
                                     client_factory=client_factory,
                                     known_hosts=None) as conn:

            await bot.send_message(chat_id, "‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ!")
            command = f'mkdir -p ~/.ssh && echo "{public_key.strip()}" >> ~/.ssh/authorized_keys && chmod 700 ~/.ssh && chmod 600 ~/.ssh/authorized_keys'
            result = await conn.run(command, check=True)

            if result.exit_status == 0:
                await bot.send_message(chat_id, "‚úÖ –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä!")
            else:
                await bot.send_message(chat_id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á. –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª:\n`{result.stderr}`", parse_mode="Markdown")

    except asyncssh.PermissionDenied:
        await bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ –∫–æ–¥ 2FA. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except asyncssh.ProcessError as e:
        await bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:\n`{e.stderr}`", parse_mode="Markdown")
    except asyncio.CancelledError:
        await bot.send_message(chat_id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    except (asyncssh.Error, OSError) as e:
        await bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
    except Exception as e:
        logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ SSH-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: {e}", exc_info=True)
        await bot.send_message(chat_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await bot.send_message(
            chat_id,
            "–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=main_menu_keyboard
        )
        await state.set_state(SshSteps.main_menu)


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())